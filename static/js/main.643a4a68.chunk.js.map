{"version":3,"sources":["trivia/question.tsx","trivia/ShuffleButton.tsx","trivia/board.tsx","shared/exit.tsx","splash/button.tsx","splash/welcome.tsx","splash/splash.tsx","reportWebVitals.ts","index.tsx"],"names":["QuestionTile","questionInfo","useState","step","setStep","category","display","setDisplay","console","log","Button","id","onClick","question","answer","variant","size","ShuffleButton","text","handleShuffle","disableButton","disabled","jservice","TriviaBoard","questions","setQuestions","gotQuestions","setGotQuestions","a","fetch","res","json","body","q","ok","forEach","item","push","title","alert","Container","fluid","className","Row","ExitButton","this","props","handleExit","React","Component","SplashButton","handleGame","SplashHeader","style","color","marginBottom","Splash","state","playing","playingTrivia","playingJeop","handleTrivia","bind","handleJeop","setState","choices","Col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kZAiCeA,EAxBM,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,aAGnB,EAAwBC,oBAFJ,kBAAM,KAE1B,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAFV,kBAAMD,EAAaI,YAEvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACAC,QAAQC,IAAI,aAAcR,EAAaI,UAevC,OAAO,cAACK,EAAA,EAAD,CAAQC,GAAG,eAAeC,QAbb,WACH,IAATT,GACAI,EAAWN,EAAaY,UACxBT,EAAQ,IACQ,IAATD,GACPI,EAAWN,EAAaa,QACxBV,EAAQ,IACQ,IAATD,IACPI,EAAWN,EAAaI,UACxBD,EAAQ,KAIuCW,QAAQ,YAAYC,KAAK,QAAzE,SAAkFV,KCT9EW,G,MATO,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,cAE3C,OACE,8BACE,cAACV,EAAA,EAAD,CAAQC,GAAG,gBAAgBI,QAAQ,YAAYC,KAAK,QAAQJ,QAASO,EAAeE,SAAUD,EAA9F,SAA8GF,Q,gBCA9GI,EAAW,yCA0CFC,EAxCK,WAChB,MAAkCrB,mBAA0B,CAAC,CAACG,SAAU,GAAIQ,SAAU,GAAIC,OAAQ,IACtC,CAACT,SAAU,GAAIQ,SAAU,GAAIC,OAAQ,IACrC,CAACT,SAAU,GAAIQ,SAAU,GAAIC,OAAQ,IACrC,CAACT,SAAU,GAAIQ,SAAU,GAAIC,OAAQ,IACrC,CAACT,SAAU,GAAIQ,SAAU,GAAIC,OAAQ,MAJjG,mBAAOU,EAAP,KAAkBC,EAAlB,KAKA,EAAwCvB,oBAAkB,GAA1D,mBAAOwB,EAAP,KAAqBC,EAArB,KANsB,4CAQtB,gCAAAC,EAAA,sEACsBC,MAAMP,GAD5B,cACUQ,EADV,gBAEuBA,EAAIC,OAF3B,OAEUC,EAFV,OAGQC,EAAgB,GAChBH,EAAII,IACJF,EAAKG,SAAS,SAACC,GACXH,EAAEI,KAAK,CAAC,SAAYD,EAAK/B,SAASiC,MAAO,SAAYF,EAAKvB,SAAU,OAAUuB,EAAKtB,YAEvFW,EAAaQ,GACbN,GAAgB,IAEhBY,MAAM,0CAXd,4CARsB,sBAwBtB,OACI,eAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,eAA3B,WACMhB,GAAgB,cAAC,EAAD,CAAeR,KAAK,kBAAkBC,cA1B1C,2CA0BwEC,cAAeM,IACrG,eAACiB,EAAA,EAAD,CAAKD,UAAU,yBAAf,UACKhB,GAAgB,cAAC,EAAD,CAAczB,aAAcuB,EAAU,KACtDE,GAAgB,cAAC,EAAD,CAAczB,aAAcuB,EAAU,KACtDE,GAAgB,cAAC,EAAD,CAAczB,aAAcuB,EAAU,QAE3D,eAACmB,EAAA,EAAD,CAAKD,UAAU,yBAAf,UACKhB,GAAgB,cAAC,EAAD,CAAczB,aAAcuB,EAAU,KACtDE,GAAgB,cAAC,EAAD,CAAczB,aAAcuB,EAAU,YCzCjEoB,G,kKACF,WACI,OAAO,cAAClC,EAAA,EAAD,CAAQC,GAAG,aAAaI,QAAQ,YAAYC,KAAK,QAAQJ,QAASiC,KAAKC,MAAMC,WAA7E,SAA0FF,KAAKC,MAAM5B,W,GAF3F8B,IAAMC,YAMhBL,I,QCPTM,G,kKACF,WACI,OAAO,cAACxC,EAAA,EAAD,CAAQC,GAAG,aAAaI,QAAQ,YAAYC,KAAK,QAAQJ,QAASiC,KAAKC,MAAMK,WAA7E,SAA0FN,KAAKC,MAAM5B,W,GAFzF8B,IAAMC,YAMlBC,ICZTE,E,4JACF,WAEI,OAAO,oBAAIC,MAAO,CAACC,MAAO,QAASC,aAAc,QAA1C,SADS,2B,GAFGP,aAOZI,ICiEAI,E,kDApDX,WAAYV,GAAqB,IAAD,8BAC5B,cAAMA,IAMVW,MAAqB,CACjBC,SAAS,EACTC,eAAe,EACfC,aAAa,GARb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKf,WAAa,EAAKA,WAAWe,KAAhB,gBAJU,E,8CAahC,WACIjB,KAAKmB,SAAS,CAACN,SAAS,EAAOC,eAAe,EAAOC,aAAa,M,0BAGtE,WACIf,KAAKmB,UAAS,SAAAP,GAAK,MAAK,CAACC,SAAS,EAAMC,eAAe,EAAMC,aAAa,Q,wBAG9E,WACIf,KAAKmB,UAAS,SAAAP,GAAK,MAAK,CAACC,SAAS,EAAMC,eAAe,EAAOC,aAAa,Q,oBAG/E,WACI,IAAIK,EAWJ,OAVKpB,KAAKY,MAAMC,UACZO,EAAY,gCACI,cAAC,EAAD,IACA,eAACC,EAAA,EAAD,WACI,cAAC,EAAD,CAAchD,KAAK,SAASiC,WAAYN,KAAKgB,eAC7C,cAAC,EAAD,CAAc3C,KAAK,WAAWiC,WAAYN,KAAKkB,oBAMnE,eAACvB,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,MAA3B,UACI,cAACC,EAAA,EAAD,CAAKD,UAAU,SAAf,SAAwB,cAACwB,EAAA,EAAD,MACxB,eAACvB,EAAA,EAAD,CAAKD,UAAU,OAAf,UACOG,KAAKY,MAAMC,QAAoB,KAAVO,EACtBpB,KAAKY,MAAME,cAAgB,cAAC,EAAD,IAAkB,QAEnD,cAAChB,EAAA,EAAD,CAAKD,UAAU,gCAAf,SACKG,KAAKY,MAAMC,QAAU,cAAC,EAAD,CAAYX,WAAYF,KAAKE,WAAY7B,KAAK,SAAW,c,GA9C9E8B,IAAMC,WCRZkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.643a4a68.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport './question.css';\r\nimport { question } from './board';\r\n\r\ninterface questionProps {\r\n    questionInfo: question\r\n}\r\n\r\nconst QuestionTile = ({questionInfo}: questionProps) => {\r\n    const initialStep = () => 1;\r\n    const initialText = () => questionInfo.category;\r\n    const [step, setStep] = useState(initialStep);\r\n    const [display, setDisplay] = useState(initialText);\r\n    console.log('category: ', questionInfo.category);\r\n\r\n    const handleClick = () => {\r\n        if (step === 1) {\r\n            setDisplay(questionInfo.question);\r\n            setStep(2);\r\n        } else if (step === 2) {\r\n            setDisplay(questionInfo.answer);\r\n            setStep(3);\r\n        } else if (step === 3) {\r\n            setDisplay(questionInfo.category);\r\n            setStep(1);\r\n        } \r\n    }\r\n\r\n    return <Button id=\"questionTile\" onClick={handleClick} variant=\"contained\" size=\"large\">{display}</Button>\r\n};\r\n\r\n\r\nexport default QuestionTile;","import React from 'react';\nimport Button from '@mui/material/Button';\nimport './ShuffleButton.css';\n\n\ninterface shuffleProps {\n  text: string,\n  handleShuffle: any,\n  disableButton: boolean,\n}\n\nconst ShuffleButton = ({text, handleShuffle, disableButton}: shuffleProps) => {\n\n  return (\n    <div>\n      <Button id=\"shuffleButton\" variant=\"contained\" size=\"small\" onClick={handleShuffle} disabled={disableButton}>{text}</Button>\n    </div>\n  )\n};\n\nexport default ShuffleButton;\n","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport QuestionTile from './question';\r\nimport ShuffleButton from './ShuffleButton';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\n\r\n\r\nexport interface question {\r\n    category: string,\r\n    question: string,\r\n    answer: string,\r\n}\r\n\r\nconst jservice = 'https://jservice.io/api/random?count=5';\r\n\r\nconst TriviaBoard = () => {\r\n    const [questions, setQuestions] = useState<Array<question>>([{category: '', question: '', answer: ''},\r\n                                                                {category: '', question: '', answer: ''},\r\n                                                                {category: '', question: '', answer: ''},\r\n                                                                {category: '', question: '', answer: ''}, \r\n                                                                {category: '', question: '', answer: ''}]);\r\n    const [gotQuestions, setGotQuestions] = useState<boolean>(false);\r\n\r\n    async function handleShuffle() {\r\n        const res = await fetch(jservice);\r\n        const body = await res.json();\r\n        let q: question[] = [];\r\n        if (res.ok) {\r\n            body.forEach( (item: any) => {\r\n                q.push({'category': item.category.title, 'question': item.question, 'answer': item.answer})\r\n            })\r\n            setQuestions(q);\r\n            setGotQuestions(true);\r\n        } else {\r\n            alert('Unable to get questions from JService!')\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <Container fluid className=\"trivia-board\">\r\n            {!gotQuestions && <ShuffleButton text=\"Get Some Trivia\" handleShuffle={handleShuffle} disableButton={gotQuestions}  />}\r\n            <Row className=\"justify-content-center\">\r\n                {gotQuestions && <QuestionTile questionInfo={questions[0]} />}\r\n                {gotQuestions && <QuestionTile questionInfo={questions[1]} />}\r\n                {gotQuestions && <QuestionTile questionInfo={questions[2]} />}\r\n            </Row>\r\n            <Row className=\"justify-content-center\">\r\n                {gotQuestions && <QuestionTile questionInfo={questions[3]} />}\r\n                {gotQuestions && <QuestionTile questionInfo={questions[4]} />}\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TriviaBoard;","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport './exit.css';\r\n\r\n\r\ninterface Props {\r\n    text: string;\r\n    handleExit: () => void;\r\n}\r\n\r\nclass ExitButton extends React.Component<Props> {\r\n    render() {\r\n        return <Button id=\"exitButton\" variant=\"contained\" size=\"large\" onClick={this.props.handleExit}>{this.props.text}</Button> \r\n    }     \r\n}\r\n\r\nexport default ExitButton;","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport './button.css';\r\n\r\ntype gameProps = {\r\n    text: string,\r\n    handleGame: () => void;\r\n}\r\n\r\nclass SplashButton extends React.Component<gameProps> {\r\n    render() {\r\n        return <Button id=\"gameButton\" variant=\"contained\" size=\"large\" onClick={this.props.handleGame}>{this.props.text}</Button> \r\n    }      \r\n}\r\n\r\nexport default SplashButton;","import * as React from \"react\";\r\n\r\n\r\nclass SplashHeader extends React.Component {\r\n    render() {\r\n        const welcome = 'Choose A Game Mode';\r\n        return <h1 style={{color: \"white\", marginBottom: \"25px\"}}>{welcome}</h1>\r\n    }\r\n}\r\n\r\nexport default SplashHeader;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './splash.css';\r\nimport TriviaBoard from '../trivia/board';\r\nimport ExitButton from '../shared/exit';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport SplashButton from './button';\r\nimport SplashHeader from './welcome';\r\n\r\n\r\ninterface splashState {\r\n    playing: boolean,\r\n    playingTrivia: boolean,\r\n    playingJeop: boolean,\r\n}\r\n\r\ninterface splashProps {\r\n}\r\n\r\n\r\nclass Splash extends React.Component<splashProps, splashState> {\r\n    constructor(props: splashProps) {\r\n        super(props);\r\n        this.handleTrivia = this.handleTrivia.bind(this);\r\n        this.handleJeop = this.handleJeop.bind(this);\r\n        this.handleExit = this.handleExit.bind(this);\r\n    }\r\n\r\n    state: splashState = {\r\n        playing: false,\r\n        playingTrivia: false,\r\n        playingJeop: false\r\n    }\r\n\r\n    handleExit() {\r\n        this.setState({playing: false, playingTrivia: false, playingJeop: false })\r\n      }\r\n    \r\n    handleTrivia() {\r\n        this.setState(state => ({playing: true, playingTrivia: true, playingJeop: false}))\r\n    }\r\n\r\n    handleJeop() {\r\n        this.setState(state => ({playing: true, playingTrivia: false, playingJeop: true}))\r\n    }\r\n\r\n    render() {\r\n        let choices;\r\n        if (!this.state.playing) {\r\n            choices =   <div>\r\n                            <SplashHeader />\r\n                            <Col>\r\n                                <SplashButton text=\"Trivia\" handleGame={this.handleTrivia} />\r\n                                <SplashButton text=\"Jeopardy\" handleGame={this.handleJeop} />\r\n                            </Col>\r\n                        </div>\r\n        }\r\n\r\n        return (\r\n            <Container fluid className=\"App\">\r\n                <Row className=\"bumper\"><Col></Col></Row>\r\n                <Row className=\"body\">\r\n                    { !this.state.playing ? choices : null }\r\n                    { this.state.playingTrivia ? <TriviaBoard /> : null }\r\n                </Row>\r\n                <Row className=\"justify-content-center bumper\">\r\n                    {this.state.playing ? <ExitButton handleExit={this.handleExit} text=\"Exit\"/> : null }\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Splash;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Splash from './splash/splash';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Splash />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}