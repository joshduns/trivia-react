{"version":3,"sources":["trivia/question.tsx","trivia/ShuffleButton.tsx","trivia/board.tsx","shared/exit.tsx","splash/button.tsx","splash/welcome.tsx","splash/splash.tsx","reportWebVitals.ts","index.tsx"],"names":["QuestionTile","questionInfo","useState","step","setStep","category","display","setDisplay","console","log","Button","id","onClick","question","answer","ShuffleButton","text","handleShuffle","disableButton","variant","size","disabled","jservice","TriviaBoard","questions","setQuestions","gotQuestions","setGotQuestions","a","fetch","res","json","body","q","ok","forEach","item","questionValid","push","title","length","alert","ques","className","ExitButton","handleExit","IconButton","color","fontSize","SplashButton","this","props","handleGame","React","Component","SplashHeader","Splash","state","playing","playingTrivia","playingJeop","handleTrivia","bind","handleJeop","setState","choices","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50936c3d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport './question.css';\r\nimport { question } from './board';\r\n\r\n\r\ninterface questionProps {\r\n    questionInfo: question\r\n}\r\n\r\nconst QuestionTile = ({questionInfo}: questionProps) => {\r\n    const initialStep = () => 1;\r\n    const initialText = () => questionInfo.category;\r\n    const [step, setStep] = useState(initialStep);\r\n    const [display, setDisplay] = useState(initialText);\r\n    console.log('category: ', questionInfo.category);\r\n\r\n    const handleClick = () => {\r\n        if (step === 1) {\r\n            setDisplay(questionInfo.question);\r\n            setStep(2);\r\n        } else if (step === 2) {\r\n            setDisplay(questionInfo.answer);\r\n            setStep(3);\r\n        } else if (step === 3) {\r\n            setDisplay(questionInfo.category);\r\n            setStep(1);\r\n        } \r\n    }\r\n\r\n    return <Button id=\"questionButton\" onClick={handleClick}>{display}</Button>\r\n};\r\n\r\n\r\nexport default QuestionTile;","import React from 'react';\nimport Button from '@mui/material/Button';\nimport './ShuffleButton.css';\n\n\ninterface shuffleProps {\n  text: string,\n  handleShuffle: any,\n  disableButton: boolean,\n}\n\nconst ShuffleButton = ({text, handleShuffle, disableButton}: shuffleProps) => {\n\n  return (\n    <div>\n      <Button id=\"shuffleButton\" variant=\"contained\" size=\"small\" onClick={handleShuffle} disabled={disableButton}>{text}</Button>\n    </div>\n  )\n};\n\nexport default ShuffleButton;\n","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport QuestionTile from './question';\r\nimport ShuffleButton from './ShuffleButton';\r\n\r\n\r\nexport interface question {\r\n    category: string,\r\n    question: string,\r\n    answer: string,\r\n}\r\n\r\nconst jservice = 'https://jservice.io/api/random?count=10';\r\n\r\nconst TriviaBoard = () => {\r\n    const [questions, setQuestions] = useState<Array<question>>([{category: '', question: '', answer: ''},\r\n                                                                {category: '', question: '', answer: ''},\r\n                                                                {category: '', question: '', answer: ''},\r\n                                                                {category: '', question: '', answer: ''}, \r\n                                                                {category: '', question: '', answer: ''}]);\r\n    const [gotQuestions, setGotQuestions] = useState<boolean>(false);\r\n\r\n    async function handleShuffle() {\r\n        const res = await fetch(jservice);\r\n        const body = await res.json();\r\n        let q: question[] = [];\r\n        if (res.ok) {\r\n            body.forEach( (item: any) => {\r\n                if (questionValid(item)){\r\n                    q.push({'category': item.category.title, 'question': item.question, 'answer': item.answer})\r\n                }\r\n            })\r\n            if (q.length >= 5) {\r\n                setQuestions(q);\r\n                setGotQuestions(true);\r\n            } else {\r\n                alert('Unable to get valid questions from JService. Try getting more questions.')\r\n            }\r\n        } else {\r\n            alert('Unable to get questions from JService!')\r\n        }\r\n    }\r\n\r\n    const questionValid = (ques: any) => {\r\n        if (ques.category.title === '' || ques.question === '' || ques.answer === '') {\r\n            return false\r\n        } else{\r\n            return true\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"triviaBoard\">\r\n            {!gotQuestions && <ShuffleButton text=\"Get Some Trivia\" handleShuffle={handleShuffle} disableButton={gotQuestions}  />}\r\n            <div className=\"topRow\">\r\n                {gotQuestions && <QuestionTile questionInfo={questions[0]} />}\r\n                {gotQuestions && <QuestionTile questionInfo={questions[1]} />}\r\n                {gotQuestions && <QuestionTile questionInfo={questions[2]} />}\r\n                {gotQuestions && <QuestionTile questionInfo={questions[3]} />}\r\n                {gotQuestions && <QuestionTile questionInfo={questions[4]} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TriviaBoard;","import React from 'react';\r\nimport './exit.css';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\n\r\n\r\ninterface Props {\r\n    handleExit: () => void;\r\n}\r\n\r\nconst ExitButton = ({handleExit}: Props) => {\r\n    return (\r\n        <IconButton color=\"secondary\" aria-label=\"home\" size=\"large\" onClick={handleExit}>\r\n            <HomeIcon fontSize=\"inherit\" />\r\n        </IconButton> \r\n    )\r\n}\r\n\r\nexport default ExitButton;","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport './button.css';\r\n\r\ntype gameProps = {\r\n    text: string,\r\n    handleGame: () => void,\r\n    disabled: boolean,\r\n}\r\n\r\nclass SplashButton extends React.Component<gameProps> {\r\n    render() {\r\n        return <Button id=\"gameButton\" variant=\"contained\" size=\"large\" onClick={this.props.handleGame} disabled={this.props.disabled}>{this.props.text}</Button> \r\n    }      \r\n}\r\n\r\nexport default SplashButton;","import * as React from \"react\";\r\nimport './splash.css';\r\n\r\n\r\nclass SplashHeader extends React.Component {\r\n    render() {\r\n        const welcome = 'Choose A Game Mode';\r\n        return <h1 className=\"chooseHeader\">{welcome}</h1>\r\n    }\r\n}\r\n\r\nexport default SplashHeader;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './splash.css';\r\nimport TriviaBoard from '../trivia/board';\r\nimport ExitButton from '../shared/exit';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport SplashButton from './button';\r\nimport SplashHeader from './welcome';\r\n\r\n\r\ninterface splashState {\r\n    playing: boolean,\r\n    playingTrivia: boolean,\r\n    playingJeop: boolean,\r\n}\r\n\r\ninterface splashProps {\r\n}\r\n\r\n\r\nclass Splash extends React.Component<splashProps, splashState> {\r\n    constructor(props: splashProps) {\r\n        super(props);\r\n        this.handleTrivia = this.handleTrivia.bind(this);\r\n        this.handleJeop = this.handleJeop.bind(this);\r\n        this.handleExit = this.handleExit.bind(this);\r\n    }\r\n\r\n    state: splashState = {\r\n        playing: false,\r\n        playingTrivia: false,\r\n        playingJeop: false\r\n    }\r\n\r\n    handleExit() {\r\n        this.setState({playing: false, playingTrivia: false, playingJeop: false })\r\n      }\r\n    \r\n    handleTrivia() {\r\n        this.setState(state => ({playing: true, playingTrivia: true, playingJeop: false}))\r\n    }\r\n\r\n    handleJeop() {\r\n        this.setState(state => ({playing: true, playingTrivia: false, playingJeop: true}))\r\n    }\r\n\r\n    render() {\r\n        let choices;\r\n        if (!this.state.playing) {\r\n            choices =   <div className=\"alignCenter\">\r\n                            <SplashHeader />\r\n                            <div className=\"chooseButtons\">\r\n                                <SplashButton text=\"Trivia\" handleGame={this.handleTrivia} disabled={false} />\r\n                                <SplashButton text=\"Jeopardy\" handleGame={this.handleJeop} disabled={true} />\r\n                            </div>\r\n                        </div>\r\n        }\r\n\r\n        return (\r\n            <body className=\"app\">\r\n                <header className=\"header\"></header>\r\n                <main className=\"body\">\r\n                    { !this.state.playing ? choices : null }\r\n                    { this.state.playingTrivia ? <TriviaBoard /> : null }\r\n                </main>\r\n                <footer className=\"footer\">\r\n                    {this.state.playing ? <ExitButton handleExit={this.handleExit} /> : null }\r\n                </footer>\r\n            </body>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Splash;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Splash from './splash/splash';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Splash />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}